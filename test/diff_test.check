#include "emu_shell.h"
#include <stdlib.h>
#include <stdio.h>

#test second_test
    State8080* state = malloc(64001);

    // Store hex value into a char *
    char * buffer = "000102"; char * pos = buffer;
    unsigned char val[3];
    for(int i = 0; i < sizeof(val); i++) {
        sscanf(pos, "%2hhx", &val[i]);
        pos += 2;
    }

    state->memory = val;
    Emulate8080Op(state);

#test mov_d_to_a
    State8080* state = malloc(64001);

    // Store hex value into a char *
    char * buffer = "7a"; char * pos = buffer;
    unsigned char val[1];
    for(int i = 0; i < sizeof(val); i++) {
        sscanf(pos, "%2hhx", &val[i]);
        pos += 2;
    }

    state->memory = val;
    state->d = 0x11;
    Emulate8080Op(state);

    ck_assert_uint_eq(state->a, 0x11);

#test nop_check_00
    State8080* state = malloc(64001);

    // Store hex value into a char *
    char * buffer = "00"; char * pos = buffer;
    unsigned char val[1];
    for(int i = 0; i < sizeof(val); i++) {
        sscanf(pos, "%2hhx", &val[i]);
        pos += 2;
    }

    state->memory = val;
    state->sp = 0xf000;
    Emulate8080Op(state);

    ck_assert_uint_eq(state->a, 0x00);
    ck_assert_uint_eq(state->b, 0x00);
    ck_assert_uint_eq(state->c, 0x00);
    ck_assert_uint_eq(state->d, 0x00);
    ck_assert_uint_eq(state->e, 0x00);
    ck_assert_uint_eq(state->h, 0x00);
    ck_assert_uint_eq(state->l, 0x00);
    ck_assert_uint_eq(state->sp, 0xf000);
    ck_assert_uint_eq(state->pc, 0x01);
    ck_assert_uint_eq(state->cc.z, 0x00);
    ck_assert_uint_eq(state->cc.s, 0x00);
    ck_assert_uint_eq(state->cc.p, 0x00);
    ck_assert_uint_eq(state->cc.cy, 0x00);
    ck_assert_uint_eq(state->cc.ac, 0x00);
    ck_assert_uint_eq(state->cc.pad, 0x00);

    free(state);

#test lxi_b_01
    State8080* state = malloc(64001);

    // Store hex value into a char *
    char * buffer = "01abcdef"; char * pos = buffer;
    unsigned char val[4];
    for(int i = 0; i < sizeof(val); i++) {
        sscanf(pos, "%2hhx", &val[i]);
        pos += 2;
    }

    state->memory = val;
    state->sp = 0xf000;
    Emulate8080Op(state);

    ck_assert_uint_eq(state->memory[state->pc], 0xef);
    ck_assert_uint_eq(state->a, 0x00);
    ck_assert_uint_eq(state->b, 0xcd);
    ck_assert_uint_eq(state->c, 0xab);
    ck_assert_uint_eq(state->d, 0x00);
    ck_assert_uint_eq(state->e, 0x00);
    ck_assert_uint_eq(state->h, 0x00);
    ck_assert_uint_eq(state->l, 0x00);
    ck_assert_uint_eq(state->sp, 0xf000);
    ck_assert_uint_eq(state->pc, 0x03);
    ck_assert_uint_eq(state->cc.z, 0x00);
    ck_assert_uint_eq(state->cc.s, 0x00);
    ck_assert_uint_eq(state->cc.p, 0x00);
    ck_assert_uint_eq(state->cc.cy, 0x00);
    ck_assert_uint_eq(state->cc.ac, 0x00);
    ck_assert_uint_eq(state->cc.pad, 0x00);

    free(state);
